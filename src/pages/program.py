"""program.py

Utility to take the table rows from program-start.html and edit it, mostly to
make them look nicer and to add links to the pdfs.

This assumes that in program-start.html each <tr> is at the beginning of a line
(this may need a little manual edit of the input file).

Note that program-start.html was originally generated by the start site, but
that it was edited so it looks like all the other pages in the LAW-XI website
(adding header and foot and navigation and such).

Prints rows to stdout. The output of this script should replace program.html.

"""

from HTMLParser import HTMLParser
import sys, StringIO


TABLE = StringIO.StringIO()

# list of titles with mapping to count identifier in pdf files
TITLES = {
    "Crowdsourced Hedge Term Disambiguation": "01",
    "WiRe57 : A Fine-Grained Benchmark for Open Information Extraction": "02",
    "Crowdsourcing Discourse Relation Annotations by a Two-Step Connective Insertion Task": "03",
    "Annotating and analyzing the interactions between meaning relations": "04",
    "CCGweb: a New Annotation Tool and a First Quadrilingual CCG Treebank": "05",
    "The making of the Litkey Corpus, a richly annotated longitudinal corpus of German texts written by primary school children": "06",
    "The Materials Science Procedural Text Corpus: Annotating Materials Synthesis Procedures with Shallow Semantic Structures": "07",
    "Tagging modality in Oceanic languages of Melanesia": "08",
    "Harmonizing Different Lemmatization Strategies for Building a Knowledge Base of Linguistic Resources for Latin": "09",
    "Assessing Back-Translation as a Corpus Generation Strategy": "10",
    "A Framework for Annotating ": "11",
    "An Online Annotation Assistant for Argument Schemes": "12",
    "Annotating formulaic sequences in spoken Slovenian": "13",
    "Annotating Information Structure in Italian": "14",
}


class Parser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        # print "Encountered a start tag:", tag, attrs
        if tag == "tr":
            TABLE.write("\n")
        elif tag == "td":
            TABLE.write("\n  ")
        if tag == "a":
            return
        if attrs:
            attrs = adjust_attributes(attrs)
            # sys.stderr.write("%s\n" % attrs)
            TABLE.write(
                "<%s %s>" % (tag, " ".join(['%s="%s"' % (a, v) for a, v in attrs]))
            )
        else:
            TABLE.write("<%s>" % tag)

    def handle_endtag(self, tag):
        # print "Encountered an end tag :", tag
        TABLE.write("</%s>" % tag)

    def handle_data(self, data):
        # print "Encountered some data  :", data
        if data.startswith("Invited"):
            sys.stderr.write(data + "\n")
        if data.startswith("Invited Talk I"):
            data += ". <a class=paper href=invited.html>(abstract)</a>"
        elif data in TITLES:
            data += ". (<a class=paper href=pdf/W19-40%s.pdf>pdf</a>)" % TITLES[data]
        # if not data[0] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') and len(data) > 10:
        #    sys.stderr.write('>>>'+data+"\n")

        TABLE.write(data)

    def handle_charref(self, data):
        # print "Encountered charref    :", data
        TABLE.write("&#%s;" % data)

    def handle_entityref(self, data):
        # print "Encountered entref     :", data
        TABLE.write("&%s;" % data)


def adjust_attributes(attrs):
    new_attrs = []
    if find_attribute(attrs, "colspan"):
        # sys.stderr.write("%s\n" % attrs)
        for a, v in attrs:
            if a == "style":
                continue
            new_attrs.append((a, v))
        # sys.stderr.write("%s\n" % new_attrs)
    else:
        for a, v in attrs:
            if a == "width":
                new_attrs.append((a, "125"))
                # sys.stderr.write("%s\n" % new_attrs)
            else:
                new_attrs.append((a, v))
    return new_attrs


def find_attribute(attrs, attr):
    # sys.stderr.write("%s\n" % attrs)
    for a, v in attrs:
        # sys.stderr.write("  %s == %s\n" % (a,attr))
        if a == attr:
            # sys.stderr.write("  %s == %s\n" % (a,attr))
            return True
    return False


def do_table(table):
    parser = Parser()
    parser.feed(table.getvalue())
    print(TABLE.getvalue())


parts = {
    "start": StringIO.StringIO(),
    "table": StringIO.StringIO(),
    "end": StringIO.StringIO(),
}

location = "start"

for line in open("program-start.html"):
    if line.startswith("<table"):
        location = "table"
    elif line.startswith("</table"):
        location = "end"
    parts[location].write(line)

print(parts["start"].getvalue())
do_table(parts["table"])
print(parts["end"].getvalue())
